import telebot
from telebot import types
from DataBase.dbIndex import DB
from SMTP.index import sendToGmail,ganerateTextForOrder
import time
bot = telebot.TeleBot('5310520335:AAEcU7TtRwtOkS2Ai6yIPcDj1IUgLpOdMVo')
db = DB()

@bot.message_handler(commands=['start'])
def start(message):
    string = f'–ü—Ä–∏–≤—ñ—Ç, <b>{message.chat.first_name if len(message.chat.first_name) != 0 else message.chat.username}</b>\n' \
             f'–ú–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ —É –Ω–∞—à–æ–º—É –±–æ—Ç—ñ! –û–±–∏—Ä–∞–π —Ç–æ–≤–∞—Ä–∏ —É –∫–∞—Ç–æ–ª–æ–∑—ñ —Ç–∞ –æ—Ñ–æ—Ä–º–ª—é–π –∑–∞–∫–∞–∑ —É –∫–æ—Ä–∑–∏–Ω—ñ'
    bot.send_message(message.chat.id, string, parse_mode='html')

    if db.get_customers_by_id(message.from_user.id) == True:
        bot.send_message(message.chat.id, f"{message.chat.first_name}, —Ä–∞–¥—ñ –í–∞—Å –∑–Ω–æ–≤—É –≤—ñ—Ç–∞—Ç–∏ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ!", reply_markup=my_reply_markup())
    else:
        bot.send_message(message.chat.id, '–ë—É–¥—å-–ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ø–æ—à—Ç—É, –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
        bot.register_next_step_handler(message, setMail)

@bot.message_handler(commands=['menu'])
def menu(message):
    bot.send_message(message.chat.id,'–û–±–∏—Ä—ñ—Ç—å, –±—É–¥—å-–ª–∞—Å–∫–∞, —Ç–æ–≤–∞—Ä–∏', reply_markup=my_reply_markup())


def setMail(message):
     # check regEx mail

     cust = {
        "userID": message.from_user.id,
        "userName": message.chat.first_name,
        "userSurname": message.chat.last_name,
        "userUsername": message.chat.username,
        "Mail": message.text
     }
     db.insert_customer(cust)


     bot.send_message(message.chat.id, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è!!', reply_markup=my_reply_markup())

def my_reply_markup():
    markup = types.ReplyKeyboardMarkup()
    markup.add(types.KeyboardButton('üñ•Ô∏è –ö–∞—Ç–∞–ª–æ–≥'), types.KeyboardButton('üî• –ê–∫—Ü—ñ–π–Ω—ñ —Ç–æ–≤–∞—Ä–∏'))
    markup.add(types.KeyboardButton('üíÅüèª –û –Ω–∞—Å'), types.KeyboardButton('üóíÔ∏è –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è'))
    markup.add(types.KeyboardButton('üõí –ö–æ—à–∏–∫'))
    return markup

@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == 'üñ•Ô∏è –ö–∞—Ç–∞–ª–æ–≥':
            global_category = db.get_Global_Category()
            buttons = list()
            c=0

            for item in global_category:
                if item['id'] % 2 != 0:
                    buttons.append([types.InlineKeyboardButton(item['name'], callback_data=str(item['id'])+'_dg')])
            for item in global_category:
                if item['id'] % 2 == 0:
                    buttons[c].append(types.InlineKeyboardButton(item['name'], callback_data=str(item['id'])+'_dg'))
                    c = c+1
            print(buttons)

            bot.send_message(message.chat.id, '\n\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å', reply_markup=types.InlineKeyboardMarkup(buttons))

        elif message.text == 'üõí –ö–æ—à–∏–∫':
            objFromBasket = db.get_basket(message.from_user.id)
            if(objFromBasket != []):
                idsProdFromBasket = objFromBasket[0]['idsProd']
                countsProd = objFromBasket[0]['countsProd'].split(',')

                idsProdFromBasket = 'id = ' + idsProdFromBasket.replace(',', ' or id=')
                str_str = f"<b>–ö–æ—à–∏–∫</b>\n\n"
                products = db.get_Product_by_all_id(idsProdFromBasket)
                c = 0
                for item in products:
                    str_str += f"<b>{item['Name']}</b>\t" \
                               f"\n<i><u>{item['Price']} –≥—Ä–Ω.</u></i> x {countsProd[c]}\n" \
                               f"--------------------------------------------------------------------\n"
                    c+=1
                str_str += f"\n<b>–†–∞–∑–æ–º: {str(objFromBasket[0]['SumOrder'])} –≥—Ä–Ω.</b>"
                buttons = list()
                buttons.append(
                    [types.InlineKeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"{str(objFromBasket[0]['id'])}" + "_red"),
                     types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–∫–∞–∑",
                                                callback_data=f"{str(message.from_user.id)}" + "_ofOrd")])

                bot.send_message(message.chat.id, str_str, parse_mode="html",
                                 reply_markup=types.InlineKeyboardMarkup(buttons))
            else:
                bot.send_message(message.chat.id, '–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.')

        elif message.text == 'üî• –ê–∫—Ü—ñ–π–Ω—ñ —Ç–æ–≤–∞—Ä–∏':
            Products = db.get_Sale_Product()
            if Products != None:
                for item in Products:
                    if item["countProd"] != 0:
                        try:
                            photoProd = open(
                                f'C:/Users/–í–ª–∞–¥–µ–ª–µ—Ü/PycharmProjects/TelegramBotElectronic/Data/PhotoProduct/{item["NamePhoto"]}',
                                'rb')
                        except:
                            photoProd = 'https://kebabchef.ua/images/photo_default_1_0.png'
                        strProd = f'\n\n\n<b>{item["Name"]}</b>\n\n' \
                                  f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n' \
                                  f'<i>{item["Description"]}</i>\n\n' \
                                  f'–°—Ç–∞—Ä–∞ —Ü—ñ–Ω–∞: <s>{item["Price"]}</s>' \
                                  f'<b>\n–ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞</b> <u>{float(item["Price"]) * float(item["percentSale"])}</u> –≥—Ä–Ω.'

                        buttons = list()
                        buttons.append([types.InlineKeyboardButton('‚ûñ', callback_data='_minus'),
                                        types.InlineKeyboardButton('1', callback_data='_count'),
                                        types.InlineKeyboardButton('‚ûï', callback_data='_plus')])
                        buttons.append(
                            [types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞', callback_data=f'{item["id"]}_addToBas')])
                        bot.send_photo(message.from_user.id, photoProd, strProd, parse_mode='html',
                                       reply_markup=types.InlineKeyboardMarkup(buttons))

        elif message.text == 'üíÅüèª –û –Ω–∞—Å':
            bot.send_message(message.chat.id,
                             '–®—É–∫–∞—î—à –º–∞–≥–∞–∑–∏–Ω, –¥–µ —î –≤—Å–µ —Ç–∞ —Ç—Ä—ñ—à–∫–∏ –±—ñ–ª—å—à–µ? –¢–æ–¥—ñ –í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é, —Ç–∞–∫ —è–∫ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω '
                             '<b>Technique4You</b> –¥–æ–ø–æ–º–æ–≥–∞—î –ø–æ–∫—É–ø—Ü–µ–≤—ñ –∑–Ω–∞–π—Ç–∏, –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ —ñ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è –∑ –≤–∏–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä—É —Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É. \n'
                             '\n<u><b>–ü–µ—Ä–µ–≤–∞–≥–∏ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ –∑ –Ω–∞–º–∏:</b></u>\n\n'
                             '1. –°—Ç–∞–±—ñ–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –≤–∏—Å–æ–∫–æ—ó —è–∫–æ—Å—Ç—ñ.‚öñ\n'
                             '2. –ö—Ä–∞—â–∞ –≥–µ–æ–ø–æ–ª—ñ—Ç–∏–∫–∞. –ú–∏ –º–æ–∂–µ–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä —É –±—É–¥—å-—è–∫–∏–π –∫—É—Ç–æ—á–æ–∫ —Å–≤—ñ—Ç—É.üì¨\n'
                             '3. –ü–æ–≤–Ω–∞ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å —Ç–∞ –∑—Ä—É—á–Ω—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏.üìä\n'
                             '4. –ù–∞–π–±—ñ–ª—å—à–∞ —ñ –ª–æ—è–ª—å–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è.üë®‚Äçüë©‚Äçüëß‚Äçüëß\n'
                             '5. –ù–∞–π–ø–æ–≤–Ω—ñ—à–∏–π —ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤.‚úÖ\n'
                             '6. Technique4You –¥–æ–≤—ñ—Ä—è—é—Ç—å.ü§ç', parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    dataCall = call.data
    if type(dataCall) == type('') and '_dg' in dataCall:
        call_str = dataCall.split('_dg')[0]
        categoryProd = db.get_CategoryProd(call_str)
        buttons = list()
        secondFor = 0
        firstFor = 0
        for item in categoryProd:
            if item['id'] % 2 == 0:
                firstFor += 1
                buttons.append([types.InlineKeyboardButton(item['name'], callback_data=str(item['id']) + '_dp')])

        for item in categoryProd:
            if item['id'] % 2 != 0:
                if secondFor < firstFor:
                    buttons[secondFor].append(types.InlineKeyboardButton(item['name'], callback_data=str(item['id']) + '_dp'))
                else:
                    buttons.append([types.InlineKeyboardButton(item['name'], callback_data=str(item['id'])+'_dp')])
                secondFor = secondFor + 1
        bot.send_message(call.from_user.id, '–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—É, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å', reply_markup=types.InlineKeyboardMarkup(buttons))
    elif type(dataCall) == type('') and '_dp' in dataCall:
            call_str = dataCall.split('_dp')[0]
            Products = db.get_Product(call_str)
            if Products != None:
                for item in Products:
                    if item["countProd"] != 0:
                        try:
                            photoProd = open(
                                f'C:/Users/–í–ª–∞–¥–µ–ª–µ—Ü/PycharmProjects/TelegramBotElectronic/Data/PhotoProduct/{item["NamePhoto"]}',
                                'rb')
                        except:
                            photoProd = 'https://kebabchef.ua/images/photo_default_1_0.png'
                        strProd = f'\n\n\n<b>{item["Name"]}</b>\n\n' \
                                  f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n' \
                                  f'<i>{item["Description"]}</i>\n' \
                                  f'<b>\n–¶—ñ–Ω–∞</b> <u>{item["Price"]}</u> –≥—Ä–Ω.'

                        buttons = list()
                        buttons.append([types.InlineKeyboardButton('‚ûñ', callback_data=f'1_{item["id"]}_minus'),
                                        types.InlineKeyboardButton('1', callback_data='_countProducts'),
                                        types.InlineKeyboardButton('‚ûï', callback_data=f'1_{item["id"]}_plus')])
                        buttons.append([types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞', callback_data=f'1_{item["id"]}_addToBas')])
                        bot.send_photo(call.from_user.id, photoProd, strProd, parse_mode='html', reply_markup=types.InlineKeyboardMarkup(buttons))

            else:
                bot.send_message(call.from_user.id, '–ù–∞ –∂–∞–ª—å, —É —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ üòì', parse_mode='html')
    elif type(dataCall) == type('') and '_addToBas' in dataCall:

        call_str = dataCall.split('_addToBas')[0]
        count = call_str.split('_')[0]
        call_str = call_str.split('_')[1]

        Product = db.get_Product_by_id(call_str)

        setUserBasket(call.from_user.id, Product, count)
        bot.send_message(call.from_user.id, '–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞‚úÖ')

    elif type(dataCall) == type('') and '_plus' in dataCall:
        call_str = dataCall.split('_plus')[0]
        strpuk = call_str.split('_')[0]
        call_str = call_str.split('_')[1]
        Product = db.get_Product_by_id(call_str)[0]


        str_prod = f'\n\n\n<b>{Product["Name"]}</b>\n\n' \
        f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n' \
        f'<i>{Product["Description"]}</i>\n' \
        f'<b>\n–¶—ñ–Ω–∞</b> <u>{Product["Price"]}</u> –≥—Ä–Ω.'



        if Product['countProd'] >= int(strpuk):
            count = str(int(strpuk) + 1)
        else:
            count = strpuk
            str_prod += '\n\n–¢–æ–≤–∞—Ä –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è –Ω–∞ —Å–∫–ª–∞–¥—ñ'


        if Product['countProd'] - 1 == strpuk:
            str_prod += f"\n\n–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ {Product['countProd']}"

        buttons = list()
        buttons.append([types.InlineKeyboardButton('‚ûñ', callback_data=f'{count}_{Product["id"]}_minus'),
                        types.InlineKeyboardButton(count, callback_data='_countProducts'),
                        types.InlineKeyboardButton('‚ûï', callback_data=f'{count}_{Product["id"]}_plus')])
        buttons.append([types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞', callback_data=f'{count}_{Product["id"]}_addToBas')])

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id, caption=str_prod, parse_mode='html')
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=types.InlineKeyboardMarkup(buttons))

    elif type(dataCall) == type('') and '_minus' in dataCall:
        call_str = dataCall.split('_minus')[0]
        strpuk = call_str.split('_')[0]
        call_str = call_str.split('_')[1]
        Product = db.get_Product_by_id(call_str)[0]

        count = str(str(int(strpuk) if(int(strpuk)==1)else int(strpuk) - 1 ))
        str_prod = f'\n\n\n<b>{Product["Name"]}</b>\n\n' \
        f'<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n' \
        f'<i>{Product["Description"]}</i>\n' \
        f'<b>\n–¶—ñ–Ω–∞</b> <u>{Product["Price"]}</u> –≥—Ä–Ω.'

        buttons = list()
        buttons.append([types.InlineKeyboardButton('‚ûñ', callback_data=f'{count}_{Product["id"]}_minus'),
                        types.InlineKeyboardButton(count, callback_data='_countProducts'),
                        types.InlineKeyboardButton('‚ûï', callback_data=f'{count}_{Product["id"]}_plus')])
        buttons.append([types.InlineKeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞', callback_data=f'{count}_{Product["id"]}_addToBas')])

        bot.edit_message_caption(chat_id=call.message.chat.id, message_id=call.message.id, caption=str_prod, parse_mode='html')
        bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id, reply_markup=types.InlineKeyboardMarkup(buttons))

    elif type(dataCall) == type('') and '_ofOrd' in dataCall:

        idCust = dataCall.split('_ofOrd')[0]

        basket = db.get_basket(idCust)[0]
        msg = bot.send_message(idCust, '–í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ –≤ —è–∫–µ –±—É–¥–µ –¥–æ—Å—Ç–∞–≤–∫–∞')
        bot.register_next_step_handler(msg, setCity,basket,idCust)




def setUserBasket(idCust, itemProduct, count):
    print(itemProduct)
    prodFromBasket = db.get_basket(idCust)

    if len(prodFromBasket) != 0:
        basket = {
            "idsProd": str(prodFromBasket[0]['idsProd'])+str(",") + str(itemProduct[0]['id']),
            "countsProd": str(prodFromBasket[0]['countsProd']) + str(",") + str(count),
            "SumOrder": float(prodFromBasket[0]['SumOrder'])+float(float(itemProduct[0]['Price'])*float(count))
        }
        db.update_basket(idCust, basket)
    else:

        basket = {
            "idCust": idCust,
            "idsProd": itemProduct[0]['id'],
            "SumOrder": float(float(itemProduct[0]['Price'])*float(count)),
            "countsProd": str(count),
        }
        print(basket)
        db.insert_Basket(basket)

def setCity(message,basket,idCust):
    city = message.text
    print(city)
    msg2 = bot.send_message(idCust, '–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.')
    bot.register_next_step_handler(msg2, setPhone, city,basket,idCust)

def setPhone(message,city,basket,idCust):
    phone = message.text
    print(phone)
    msg3 = bot.send_message(idCust, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏ –Ω–∞ —è–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –ø–æ—Å–∏–ª–∫—É.')
    bot.register_next_step_handler(msg3, setNp, city, phone,basket,idCust)

def setNp(message,city, phone,basket, idCust):
    np = message.text
    print(np)
    print(city)
    print(phone)
    print(basket)

    order = {
        'idCust': idCust,
        'idsProd': basket['idsProd'],
        'countProd': basket['countsProd'],
        'City': city,
        'AdressNP': np,
        'SumOrder': basket['SumOrder'],
        'Phone': phone
    }
    db.insert_orders(order)
    db.delete_Basket_by_idCust(idCust)
    cust = db.get_customers_mail(idCust)[0]
    print(cust)
    sendToGmail(cust['mail'], ganerateTextForOrder(order).as_string())
    bot.send_message(idCust, '–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–∏–ª–∏ —Å–≤—ñ–π –∑–∞–∫–∞–∑!.')



























bot.polling(none_stop=True, interval=0)

